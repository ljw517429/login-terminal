// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: login.proto

#include "login.pb.h"
#include "login.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace login {

static const char* Login_method_names[] = {
  "/login.Login/OnSignIn",
  "/login.Login/OnSignUp",
  "/login.Login/OnHeart",
};

std::unique_ptr< Login::Stub> Login::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Login::Stub> stub(new Login::Stub(channel));
  return stub;
}

Login::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_OnSignIn_(Login_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnSignUp_(Login_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnHeart_(Login_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Login::Stub::OnSignIn(::grpc::ClientContext* context, const ::login::SignInRequest& request, ::login::SignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnSignIn_, context, request, response);
}

void Login::Stub::experimental_async::OnSignIn(::grpc::ClientContext* context, const ::login::SignInRequest* request, ::login::SignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnSignIn_, context, request, response, std::move(f));
}

void Login::Stub::experimental_async::OnSignIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::login::SignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnSignIn_, context, request, response, std::move(f));
}

void Login::Stub::experimental_async::OnSignIn(::grpc::ClientContext* context, const ::login::SignInRequest* request, ::login::SignInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnSignIn_, context, request, response, reactor);
}

void Login::Stub::experimental_async::OnSignIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::login::SignInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnSignIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::login::SignInResponse>* Login::Stub::AsyncOnSignInRaw(::grpc::ClientContext* context, const ::login::SignInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::login::SignInResponse>::Create(channel_.get(), cq, rpcmethod_OnSignIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::login::SignInResponse>* Login::Stub::PrepareAsyncOnSignInRaw(::grpc::ClientContext* context, const ::login::SignInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::login::SignInResponse>::Create(channel_.get(), cq, rpcmethod_OnSignIn_, context, request, false);
}

::grpc::Status Login::Stub::OnSignUp(::grpc::ClientContext* context, const ::login::SignUpRequest& request, ::login::SignUpResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnSignUp_, context, request, response);
}

void Login::Stub::experimental_async::OnSignUp(::grpc::ClientContext* context, const ::login::SignUpRequest* request, ::login::SignUpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnSignUp_, context, request, response, std::move(f));
}

void Login::Stub::experimental_async::OnSignUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::login::SignUpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnSignUp_, context, request, response, std::move(f));
}

void Login::Stub::experimental_async::OnSignUp(::grpc::ClientContext* context, const ::login::SignUpRequest* request, ::login::SignUpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnSignUp_, context, request, response, reactor);
}

void Login::Stub::experimental_async::OnSignUp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::login::SignUpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnSignUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::login::SignUpResponse>* Login::Stub::AsyncOnSignUpRaw(::grpc::ClientContext* context, const ::login::SignUpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::login::SignUpResponse>::Create(channel_.get(), cq, rpcmethod_OnSignUp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::login::SignUpResponse>* Login::Stub::PrepareAsyncOnSignUpRaw(::grpc::ClientContext* context, const ::login::SignUpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::login::SignUpResponse>::Create(channel_.get(), cq, rpcmethod_OnSignUp_, context, request, false);
}

::grpc::Status Login::Stub::OnHeart(::grpc::ClientContext* context, const ::login::HeartRequest& request, ::login::HeartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnHeart_, context, request, response);
}

void Login::Stub::experimental_async::OnHeart(::grpc::ClientContext* context, const ::login::HeartRequest* request, ::login::HeartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnHeart_, context, request, response, std::move(f));
}

void Login::Stub::experimental_async::OnHeart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::login::HeartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnHeart_, context, request, response, std::move(f));
}

void Login::Stub::experimental_async::OnHeart(::grpc::ClientContext* context, const ::login::HeartRequest* request, ::login::HeartResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnHeart_, context, request, response, reactor);
}

void Login::Stub::experimental_async::OnHeart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::login::HeartResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnHeart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::login::HeartResponse>* Login::Stub::AsyncOnHeartRaw(::grpc::ClientContext* context, const ::login::HeartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::login::HeartResponse>::Create(channel_.get(), cq, rpcmethod_OnHeart_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::login::HeartResponse>* Login::Stub::PrepareAsyncOnHeartRaw(::grpc::ClientContext* context, const ::login::HeartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::login::HeartResponse>::Create(channel_.get(), cq, rpcmethod_OnHeart_, context, request, false);
}

Login::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Login_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Login::Service, ::login::SignInRequest, ::login::SignInResponse>(
          [](Login::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::login::SignInRequest* req,
             ::login::SignInResponse* resp) {
               return service->OnSignIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Login_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Login::Service, ::login::SignUpRequest, ::login::SignUpResponse>(
          [](Login::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::login::SignUpRequest* req,
             ::login::SignUpResponse* resp) {
               return service->OnSignUp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Login_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Login::Service, ::login::HeartRequest, ::login::HeartResponse>(
          [](Login::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::login::HeartRequest* req,
             ::login::HeartResponse* resp) {
               return service->OnHeart(ctx, req, resp);
             }, this)));
}

Login::Service::~Service() {
}

::grpc::Status Login::Service::OnSignIn(::grpc::ServerContext* context, const ::login::SignInRequest* request, ::login::SignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Login::Service::OnSignUp(::grpc::ServerContext* context, const ::login::SignUpRequest* request, ::login::SignUpResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Login::Service::OnHeart(::grpc::ServerContext* context, const ::login::HeartRequest* request, ::login::HeartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace login

